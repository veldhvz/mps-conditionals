package nl.veldhvz.conditionals.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class NodeIsInstanceOfExpression__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x630803075e1653a2L, "nl.veldhvz.conditionals.structure.NodeIsInstanceOfExpression");

  public static final SMethod<SNode> getConditionNode_id5rSvAAOiVG8 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getConditionNode").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5rSvAAOiVG8").build();
  public static final SMethod<SNode> getConditional_id5rSvAAOiVDc = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getConditional").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5rSvAAOiVDc").build();
  public static final SMethod<SNode> getTypeNode_id5rSvAAOiVEf = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getTypeNode").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5rSvAAOiVEf").build();
  public static final SMethod<SNode> getCheckedNode_id5rSvAAOj5uR = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getCheckedNode").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5rSvAAOj5uR").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getConditionNode_id5rSvAAOiVG8, getConditional_id5rSvAAOiVDc, getTypeNode_id5rSvAAOiVEf, getCheckedNode_id5rSvAAOj5uR);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode getConditionNode_id5rSvAAOiVG8(@NotNull SNode __thisNode__) {
    return __thisNode__;
  }
  /*package*/ static SNode getConditional_id5rSvAAOiVDc(@NotNull SNode __thisNode__) {
    return SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.IConditional$CG);
  }
  /*package*/ static SNode getTypeNode_id5rSvAAOiVEf(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.conceptArgument$_OQ3);
  }
  /*package*/ static SNode getCheckedNode_id5rSvAAOj5uR(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.leftExpression$9JtL);
  }

  /*package*/ NodeIsInstanceOfExpression__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) getConditionNode_id5rSvAAOiVG8(node));
      case 1:
        return (T) ((SNode) getConditional_id5rSvAAOiVDc(node));
      case 2:
        return (T) ((SNode) getTypeNode_id5rSvAAOiVEf(node));
      case 3:
        return (T) ((SNode) getCheckedNode_id5rSvAAOj5uR(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IConditional$CG = MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ac89e1b122cd5c2L, "jetbrains.mps.baseLanguage.structure.IConditional");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink conceptArgument$_OQ3 = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x630803075e1653a2L, 0x1120c4c9bb4L, "conceptArgument");
    /*package*/ static final SContainmentLink leftExpression$9JtL = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x630803075e1653a2L, 0x630803075e1653a3L, "leftExpression");
  }
}
