package nl.veldhvz.conditionals.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor mySubject__BehaviorDescriptor = new Subject__BehaviorDescriptor();
  private final BHDescriptor myBranch__BehaviorDescriptor = new Branch__BehaviorDescriptor();
  private final BHDescriptor myNodeIsInstanceOfExpression__BehaviorDescriptor = new NodeIsInstanceOfExpression__BehaviorDescriptor();
  private final BHDescriptor mySubjectReference__BehaviorDescriptor = new SubjectReference__BehaviorDescriptor();
  private final BHDescriptor myIfExpression__BehaviorDescriptor = new IfExpression__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBranch__BehaviorDescriptor;
      case 1:
        return myIfExpression__BehaviorDescriptor;
      case 2:
        return myNodeIsInstanceOfExpression__BehaviorDescriptor;
      case 3:
        return mySubject__BehaviorDescriptor;
      case 4:
        return mySubjectReference__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a694c33L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd558f179bL), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x630803075e1653a2L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a68e59bL), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd5586e304L)).seal();
}
