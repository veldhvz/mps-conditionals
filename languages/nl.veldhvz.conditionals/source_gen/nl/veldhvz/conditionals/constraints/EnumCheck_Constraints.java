package nl.veldhvz.conditionals.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.ListScope;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class EnumCheck_Constraints extends BaseConstraintsDescriptor {
  public EnumCheck_Constraints() {
    super(CONCEPTS.EnumCheck$$1);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.enum$68Ng, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:e66bc0ff-8b47-4f63-9e94-a2dd8cf8d3f2(nl.veldhvz.conditionals.constraints)", "3774406643935986395");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            {
              final SNode check = _context.getContextNode();
              if (SNodeOperations.isInstanceOf(check, CONCEPTS.EnumCheck$$1)) {
                {
                  final SNode ct = TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(check, LINKS.leftExpression$GG$V));
                  if (SNodeOperations.isInstanceOf(ct, CONCEPTS.ClassifierType$bL)) {
                    {
                      final SNode enumClass = SLinkOperations.getTarget(ct, LINKS.classifier$cxMr);
                      if (SNodeOperations.isInstanceOf(enumClass, CONCEPTS.EnumClass$Vk)) {
                        return ListScope.forNamedElements(SLinkOperations.getChildren(enumClass, LINKS.enumConstant$qtgW));
                      }
                    }
                  }
                }
              }
            }
            return null;
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept EnumCheck$$1 = MetaAdapterFactory.getConcept(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x6496adbd8979a0c6L, "nl.veldhvz.conditionals.structure.EnumCheck");
    /*package*/ static final SConcept ClassifierType$bL = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType");
    /*package*/ static final SConcept EnumClass$Vk = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink enum$68Ng = MetaAdapterFactory.getReferenceLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x6496adbd8979a0c6L, 0x6496adbd8979a3ffL, "enum");
    /*package*/ static final SContainmentLink leftExpression$GG$V = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x6496adbd8979a0c6L, 0x630803075e3bb11fL, "leftExpression");
    /*package*/ static final SReferenceLink classifier$cxMr = MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier");
    /*package*/ static final SContainmentLink enumConstant$qtgW = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, 0xfc367503acL, "enumConstant");
  }
}
