package nl.veldhvz.letexpressions.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.MappingScriptContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static void mappingScript_CodeBlock_1(final MappingScriptContext _context) {
    for (SNode letExpr : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.LetExpression$lz))) {
      SNode stmt = ListSequence.fromList(SNodeOperations.getNodeAncestors(letExpr, CONCEPTS.Statement$P6, false)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.getContainingLink(it).isMultiple();
        }
      });
      for (SNode p : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(letExpr, LINKS.prelude$FabI), LINKS.statement$53DE))) {
        SNodeOperations.deleteNode(p);
        SNodeOperations.insertPrevSiblingChild(stmt, p);
      }
      SNodeOperations.replaceWithAnother(letExpr, SLinkOperations.getTarget(letExpr, LINKS.expr$FaDK));
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("1717931039009248406", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_1(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Statement$P6 = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement");
    /*package*/ static final SConcept LetExpression$lz = MetaAdapterFactory.getConcept(0xe5bade66eb3c40c2L, 0x9c3b33309ac47758L, 0x644037fadac94b93L, "nl.veldhvz.letexpressions.structure.LetExpression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink prelude$FabI = MetaAdapterFactory.getContainmentLink(0xe5bade66eb3c40c2L, 0x9c3b33309ac47758L, 0x644037fadac94b93L, 0x644037fadac94b94L, "prelude");
    /*package*/ static final SContainmentLink statement$53DE = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement");
    /*package*/ static final SContainmentLink expr$FaDK = MetaAdapterFactory.getContainmentLink(0xe5bade66eb3c40c2L, 0x9c3b33309ac47758L, 0x644037fadac94b93L, 0x644037fadac94b96L, "expr");
  }
}
