package nl.veldhvz.conditionals.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.baseLanguage.behavior.IVariableReference__BehaviorDescriptor;
import nl.veldhvz.smartcasts.behavior.TypeCheckDataFlow;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class SubjectReference__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd5586e304L, "nl.veldhvz.conditionals.structure.SubjectReference");

  public static final SMethod<SNode> getSubject_id7jj4HPlxIz$ = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getSubject").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("7jj4HPlxIz$").build();
  public static final SMethod<SNode> getVariable_idSORzhOpB6t = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getVariable").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("SORzhOpB6t").build();
  public static final SMethod<Boolean> isInBranchCondition_id6c80Ktud9AJ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInBranchCondition").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6c80Ktud9AJ").build();
  public static final SMethod<SNode> smartCastType_id2H0nDnYl0UE = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("smartCastType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2H0nDnYl0UE").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getSubject_id7jj4HPlxIz$, getVariable_idSORzhOpB6t, isInBranchCondition_id6c80Ktud9AJ, smartCastType_id2H0nDnYl0UE);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode getSubject_id7jj4HPlxIz$(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Subject$Tl, false, false), LINKS.subject$rFoW);
  }
  /*package*/ static SNode getVariable_idSORzhOpB6t(@NotNull SNode __thisNode__) {
    return SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Subject$Tl, false, false);
  }
  /*package*/ static boolean isInBranchCondition_id6c80Ktud9AJ(@NotNull SNode __thisNode__) {
    SNode node = __thisNode__;
    while (node != null && !(SNodeOperations.isInstanceOf(node, CONCEPTS.Branch$K$))) {
      if (Objects.equals(SNodeOperations.getContainingLink(node), LINKS.condition$fRkL)) {
        return true;
      }
      node = SNodeOperations.getParent(node);
    }
    return false;
  }
  /*package*/ static SNode smartCastType_id2H0nDnYl0UE(@NotNull SNode __thisNode__) {
    SNode var = IVariableReference__BehaviorDescriptor.getVariable_idSORzhOpB6t.invoke(__thisNode__);
    if (var != null) {
      return new TypeCheckDataFlow(__thisNode__).checkedType(var);
    }
    return null;
  }

  /*package*/ SubjectReference__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) getSubject_id7jj4HPlxIz$(node));
      case 1:
        return (T) ((SNode) getVariable_idSORzhOpB6t(node));
      case 2:
        return (T) ((Boolean) isInBranchCondition_id6c80Ktud9AJ(node));
      case 3:
        return (T) ((SNode) smartCastType_id2H0nDnYl0UE(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept Subject$Tl = MetaAdapterFactory.getInterfaceConcept(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a68e59bL, "nl.veldhvz.conditionals.structure.Subject");
    /*package*/ static final SConcept Branch$K$ = MetaAdapterFactory.getConcept(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a694c33L, "nl.veldhvz.conditionals.structure.Branch");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink subject$rFoW = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a68e59bL, 0x3a45ff275a694c2eL, "subject");
    /*package*/ static final SContainmentLink condition$fRkL = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a694c33L, 0x3a45ff275a694c34L, "condition");
  }
}
