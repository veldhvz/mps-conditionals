package nl.veldhvz.conditionals.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Branch;
  private ConceptPresentation props_EnumCheck;
  private ConceptPresentation props_IfExpression;
  private ConceptPresentation props_IsInstanceOfExpression;
  private ConceptPresentation props_NodeIsInstanceOfExpression;
  private ConceptPresentation props_OrElseExpression;
  private ConceptPresentation props_Subject;
  private ConceptPresentation props_SubjectReference;
  private ConceptPresentation props_SwitchExpression;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Branch:
        if (props_Branch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Branch");
          props_Branch = cpb.create();
        }
        return props_Branch;
      case LanguageConceptSwitch.EnumCheck:
        if (props_EnumCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("is enum");
          cpb.rawPresentation("is");
          props_EnumCheck = cpb.create();
        }
        return props_EnumCheck;
      case LanguageConceptSwitch.IfExpression:
        if (props_IfExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("if expression");
          cpb.rawPresentation("if");
          props_IfExpression = cpb.create();
        }
        return props_IfExpression;
      case LanguageConceptSwitch.IsInstanceOfExpression:
        if (props_IsInstanceOfExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("is type");
          cpb.rawPresentation("is");
          props_IsInstanceOfExpression = cpb.create();
        }
        return props_IsInstanceOfExpression;
      case LanguageConceptSwitch.NodeIsInstanceOfExpression:
        if (props_NodeIsInstanceOfExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("is node type");
          cpb.rawPresentation("is");
          props_NodeIsInstanceOfExpression = cpb.create();
        }
        return props_NodeIsInstanceOfExpression;
      case LanguageConceptSwitch.OrElseExpression:
        if (props_OrElseExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("?:");
          props_OrElseExpression = cpb.create();
        }
        return props_OrElseExpression;
      case LanguageConceptSwitch.Subject:
        if (props_Subject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Subject = cpb.create();
        }
        return props_Subject;
      case LanguageConceptSwitch.SubjectReference:
        if (props_SubjectReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("it");
          props_SubjectReference = cpb.create();
        }
        return props_SubjectReference;
      case LanguageConceptSwitch.SwitchExpression:
        if (props_SwitchExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("switch expression");
          cpb.presentationByName();
          props_SwitchExpression = cpb.create();
        }
        return props_SwitchExpression;
    }
    return null;
  }
}
