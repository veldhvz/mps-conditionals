package nl.veldhvz.conditionals.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Branch_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new EnumCheck_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new IfExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new IsInstanceOfExpression_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new NodeIsInstanceOfExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new SubjectReference_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new SwitchExpression_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "jetbrains.mps.baseLanguage.editor.instanceOf":
              return Arrays.asList(new TransformationMenu[]{new IsInstanceOf()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a694c33L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x6496adbd8979a0c6L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd558f179bL), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x630803075e1518e5L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x630803075e1653a2L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd5586e304L), MetaIdFactory.conceptId(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd55967a8aL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).seal();
}
