package nl.veldhvz.conditionals.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_IfExpression_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_IfExpression_NonTypesystemRule() {
  }
  public void applyRule(final SNode ifExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode br : ListSequence.fromList(SLinkOperations.getChildren(ifExpression, LINKS.branch$VB31))) {
      if (SNodeOperations.getNextSibling(br) != null) {
        if (SLinkOperations.getTarget(br, LINKS.condition$fRkL) == null) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(br, "Missing condition", "r:09de3c41-2764-49e7-9ad7-4a60e4b0505f(nl.veldhvz.conditionals.typesystem)", "3774406643936523982", null, errorTarget);
          }
        }
      } else {
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.IfExpression$Ot;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink condition$fRkL = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x3a45ff275a694c33L, 0x3a45ff275a694c34L, "condition");
    /*package*/ static final SContainmentLink branch$VB31 = MetaAdapterFactory.getContainmentLink(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd558f179bL, 0x74d312dd558fba50L, "branch");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept IfExpression$Ot = MetaAdapterFactory.getConcept(0x29a56a408c094f5bL, 0x932d7da9f1e1d8ccL, 0x74d312dd558f179bL, "nl.veldhvz.conditionals.structure.IfExpression");
  }
}
